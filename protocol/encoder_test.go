package protocol

import (
	"bytes"
	"testing"
)

func TestEncoding(t *testing.T) {
	report := func(err error) {
		if err != nil {
			t.Errorf("Unexpected error: %s", err)
		}
	}
	test := func(filler func(PacketEncoder), expected []byte) {
		encoder := NewBytesEncoder()
		filler(encoder)
		if !bytes.Equal(expected, encoder.Bytes()) {
			t.Errorf("Expected {% x}, got {% x}", expected, encoder.buf)
		}
	}

	test(
		func(e PacketEncoder) {
			e.PutInt8(1)
			e.PutInt8(-1)
			e.PutInt8(-0x80)
		},
		[]byte{
			0x01,
			0xff,
			0x80,
		})

	test(
		func(e PacketEncoder) {
			e.PutInt16(1)
			e.PutInt16(-1)
			e.PutInt16(-0x8000)
		},
		[]byte{
			0x00, 0x01,
			0xff, 0xff,
			0x80, 0x00,
		})

	test(
		func(e PacketEncoder) {
			e.PutInt32(1)
			e.PutInt32(-1)
			e.PutInt32(-0x80000000)
		},
		[]byte{
			0x00, 0x00, 0x00, 0x01,
			0xff, 0xff, 0xff, 0xff,
			0x80, 0x00, 0x00, 0x00,
		})

	test(
		func(e PacketEncoder) {
			e.PutInt64(1)
			e.PutInt64(-1)
			e.PutInt64(-0x8000000000000000)
		},
		[]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		})

	test(
		func(e PacketEncoder) {
			report(e.PutBytes(nil))
			report(e.PutBytes([]byte{}))
			report(e.PutBytes([]byte{1, 2, 3, 4, 5}))
		},
		[]byte{
			0xff, 0xff, 0xff, 0xff,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x05,
			0x01, 0x02, 0x03, 0x04, 0x05,
		})

	test(
		func(e PacketEncoder) {
			report(e.PutString("hello"))
			report(e.PutNullString(NullString{}))
			report(e.PutNullString(NullString{"hello", true}))
		},
		[]byte{
			0x00, 0x05,
			'h', 'e', 'l', 'l', 'o',
			0xff, 0xff,
			0x00, 0x05,
			'h', 'e', 'l', 'l', 'o',
		})

	test(
		func(e PacketEncoder) {
			report(e.PutInt32Array(nil))
			report(e.PutInt32Array([]int32{}))
			report(e.PutInt32Array([]int32{1, 2, 3, 4, 5}))
		},
		[]byte{
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x05,
			0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x02,
			0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x05,
		})

	test(
		func(e PacketEncoder) {
			report(e.PutInt64Array(nil))
			report(e.PutInt64Array([]int64{}))
			report(e.PutInt64Array([]int64{1, 2, 3, 4, 5}))
		},
		[]byte{
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		})

	test(
		func(e PacketEncoder) {
			e.Push(LengthField{})
			e.Push(CRC32Field{})
			e.PutInt8(1)
			e.PutInt16(2)
			e.PutInt32(3)
			report(e.Pop())
			report(e.Pop())
		},
		[]byte{
			0x00, 0x00, 0x00, 0x0b,
			0xd8, 0xd2, 0xd6, 0x10,
			0x01,
			0x00, 0x02,
			0x00, 0x00, 0x00, 0x03,
		})
}
